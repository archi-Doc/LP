// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Arc.Unit;
using Netsphere;
using Netsphere.Server;

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS1998

namespace Netsphere.Generated;

internal static class Frontend_NetsphereTest2
{
    private static bool Initialized;

    [ModuleInitializer]
    public static void Initialize()
    {
        if (Initialized) return;
        Initialized = true;

        StaticNetService.SetFrontendDelegate<NetsphereTest.ICustomService>(static x => new Frontend_b13899db(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ICustomService2>(static x => new Frontend_ad6f1788(x));
        StaticNetService.SetFrontendDelegate<LP.NetServices.IBenchmarkService>(static x => new Frontend_4363baf9(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService>(static x => new Frontend_9645d0dc(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService2>(static x => new Frontend_2ce1324e(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService3>(static x => new Frontend_cd1942b1(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ParentClass.INestedService>(static x => new Frontend_71903709(x));
    }

    private class Frontend_b13899db : NetsphereTest.ICustomService
    {
        public Frontend_b13899db(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Test()
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                var owner = Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner.Empty;

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xb13899dbc14988faul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_ad6f1788 : NetsphereTest.ICustomService2
    {
        public Frontend_ad6f1788(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Test()
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                var owner = Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner.Empty;

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xad6f1788ee3ee8f2ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_4363baf9 : LP.NetServices.IBenchmarkService
    {
        public Frontend_4363baf9(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Send(byte[] a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                var owner = new Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner(a1);

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x4363baf9d5e531f7ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }

        public NetTask<byte[]?> Pingpong(byte[] a1)
        {
            return new NetTask<byte[]?>(Core());

            async Task<ServiceResponse<byte[]?>> Core()
            {
                var owner = new Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner(a1);

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x4363baf955eff1fcul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                var result = response.Value.Memory.ToArray();
                response.Value.Return();
                return new(result);
            }
        }

        public NetTask<Netsphere.NetResult> Register()
        {
            return new NetTask<Netsphere.NetResult>(Core());

            async Task<ServiceResponse<Netsphere.NetResult>> Core()
            {
                var owner = Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner.Empty;

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x4363baf9414f1dc0ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<Netsphere.NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }

        public NetTask<Netsphere.NetResult> Start(int a1, int a2)
        {
            return new NetTask<Netsphere.NetResult>(Core());

            async Task<ServiceResponse<Netsphere.NetResult>> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize((a1, a2), out var owner))
                {
                    return new(NetResult.SerializationError, NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x4363baf985e9adc0ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<Netsphere.NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }

        public NetTask Report(LP.NetServices.IBenchmarkService.ReportRecord a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x4363baf9d9372b51ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_9645d0dc : NetsphereTest.ITestService
    {
        public Frontend_9645d0dc(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Send(int a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x9645d0dc0c6cfd56ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_2ce1324e : NetsphereTest.ITestService2
    {
        public Frontend_2ce1324e(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Send2(int a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x2ce1324e50f72872ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_cd1942b1 : NetsphereTest.ITestService3
    {
        public Frontend_cd1942b1(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask Send3(string a1, int a2)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize((a1, a2), out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xcd1942b11d115886ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new((NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory.Span, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }

        public NetTask<int> Increment3(int a1)
        {
            return new NetTask<int>(Core());

            async Task<ServiceResponse<int>> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(default!, NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xcd1942b18883a265ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<int>(response.Value.Memory.Span, out var result))
                {
                    return new(default!, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }

        public NetTask<Arc.Unit.ByteArrayPool.MemoryOwner> SendMemoryOwner(Arc.Unit.ByteArrayPool.MemoryOwner a1)
        {
            return new NetTask<Arc.Unit.ByteArrayPool.MemoryOwner>(Core());

            async Task<ServiceResponse<Arc.Unit.ByteArrayPool.MemoryOwner>> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(default!, NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xcd1942b11e4bebe1ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<Arc.Unit.ByteArrayPool.MemoryOwner>(response.Value.Memory.Span, out var result))
                {
                    return new(default!, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }

        public NetTask<Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner> SendReadOnlyMemoryOwner(Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner a1)
        {
            return new NetTask<Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner>(Core());

            async Task<ServiceResponse<Arc.Unit.ByteArrayPool.ReadOnlyMemoryOwner>> Core()
            {
                var owner = a1.IncrementAndShare();

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0xcd1942b142ae523ful).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                var result = response.Value;
                return new(result);
            }
        }
    }

    private class Frontend_71903709 : NetsphereTest.ParentClass.INestedService
    {
        public Frontend_71903709(ClientConnection clientConnection)
        {
            this.ClientConnection = clientConnection;
        }

        public ClientConnection ClientConnection { get; }

        public NetTask<int> Increment3(int a1)
        {
            return new NetTask<int>(Core());

            async Task<ServiceResponse<int>> Core()
            {
                if (!Netsphere.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(default!, NetResult.SerializationError);
                }

                var response = await this.ClientConnection.SendAndReceiveService(owner, 0x719037097d661484ul).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, (NetResult)response.DataId);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<int>(response.Value.Memory.Span, out var result))
                {
                    return new(default!, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }
    }
}
