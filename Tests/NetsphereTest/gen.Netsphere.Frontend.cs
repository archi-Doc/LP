// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Netsphere;

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS1998

namespace Netsphere.Generated;

internal static class Frontend_NetsphereTest
{
    private static bool Initialized;

    [ModuleInitializer]
    public static void Initialize()
    {
        if (Initialized) return;
        Initialized = true;

        StaticNetService.SetFrontendDelegate<NetsphereTest.IBenchmarkService>(static x => new Frontend_1dcfb86f(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService>(static x => new Frontend_9645d0dc(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService2>(static x => new Frontend_2ce1324e(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ITestService3>(static x => new Frontend_cd1942b1(x));
        StaticNetService.SetFrontendDelegate<NetsphereTest.ParentClass.INestedService>(static x => new Frontend_71903709(x));
    }

    private class Frontend_1dcfb86f : NetsphereTest.IBenchmarkService
    {
        public Frontend_1dcfb86f(ClientTerminal clientTerminal)
        {
            this.ClientTerminal = clientTerminal;
        }

        public ClientTerminal ClientTerminal { get; }

        public NetTask Send(byte[] a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                var owner = new ByteArrayPool.MemoryOwner(a1);

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x1dcfb86fd5c029d7ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }

        public NetTask<byte[]?> Pingpong(byte[] a1)
        {
            return new NetTask<byte[]?>(Core());

            async Task<ServiceResponse<byte[]?>> Core()
            {
                var owner = new ByteArrayPool.MemoryOwner(a1);

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x1dcfb86f8fd5c589ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                var result = response.Value.Memory.ToArray();
                response.Value.Return();
                return new(result);
            }
        }

        public NetTask Wait(int a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!LP.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x1dcfb86f866e005bul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_9645d0dc : NetsphereTest.ITestService
    {
        public Frontend_9645d0dc(ClientTerminal clientTerminal)
        {
            this.ClientTerminal = clientTerminal;
        }

        public ClientTerminal ClientTerminal { get; }

        public NetTask Send(int a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!LP.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x9645d0dc0c6cfd56ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_2ce1324e : NetsphereTest.ITestService2
    {
        public Frontend_2ce1324e(ClientTerminal clientTerminal)
        {
            this.ClientTerminal = clientTerminal;
        }

        public ClientTerminal ClientTerminal { get; }

        public NetTask Send2(int a1)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!LP.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x2ce1324e50f72872ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }
    }

    private class Frontend_cd1942b1 : NetsphereTest.ITestService3
    {
        public Frontend_cd1942b1(ClientTerminal clientTerminal)
        {
            this.ClientTerminal = clientTerminal;
        }

        public ClientTerminal ClientTerminal { get; }

        public NetTask Send3(string a1, int a2)
        {
            return new NetTask(Core());

            async Task<ServiceResponse> Core()
            {
                if (!LP.Block.BlockService.TrySerialize((a1, a2), out var owner))
                {
                    return new(NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0xcd1942b11d115886ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<NetResult>(response.Value.Memory, out var result))
                {
                    return new(NetResult.DeserializationError);
                }

                response.Value.Return();
                return default;
            }
        }

        public NetTask<int> Increment3(int a1)
        {
            return new NetTask<int>(Core());

            async Task<ServiceResponse<int>> Core()
            {
                if (!LP.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(default!, NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0xcd1942b18883a265ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<int>(response.Value.Memory, out var result))
                {
                    return new(default!, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }

        public NetTask<LP.ByteArrayPool.MemoryOwner> SendMemoryOwner(LP.ByteArrayPool.MemoryOwner a1)
        {
            return new NetTask<LP.ByteArrayPool.MemoryOwner>(Core());

            async Task<ServiceResponse<LP.ByteArrayPool.MemoryOwner>> Core()
            {
                var owner = a1.IncrementAndShare();

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0xcd1942b1af7da796ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                var result = response.Value;
                return new(result);
            }
        }
    }

    private class Frontend_71903709 : NetsphereTest.ParentClass.INestedService
    {
        public Frontend_71903709(ClientTerminal clientTerminal)
        {
            this.ClientTerminal = clientTerminal;
        }

        public ClientTerminal ClientTerminal { get; }

        public NetTask<int> Increment3(int a1)
        {
            return new NetTask<int>(Core());

            async Task<ServiceResponse<int>> Core()
            {
                if (!LP.Block.BlockService.TrySerialize(a1, out var owner))
                {
                    return new(default!, NetResult.SerializationError);
                }

                var response = await this.ClientTerminal.SendAndReceiveServiceAsync(0x719037097d661484ul, owner).ConfigureAwait(false);
                owner.Return();
                if (response.Result == NetResult.Success && response.Value.IsEmpty)
                {
                    return new(default!, NetResult.NoNetService);
                }
                else if (response.Result != NetResult.Success)
                {
                    return new(default!, response.Result);
                }

                if (!Tinyhand.TinyhandSerializer.TryDeserialize<int>(response.Value.Memory, out var result))
                {
                    return new(default!, NetResult.DeserializationError);
                }

                response.Value.Return();
                return new(result);
            }
        }
    }
}
